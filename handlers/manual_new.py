import logging
from telegram import Update, ReplyKeyboardMarkup, InputFile
from telegram.ext import ContextTypes, ConversationHandler

from keyboards import ADD_EMPLOYEE_OPTION
from states import MANUAL_INPUT, ADD_ANOTHER_EMPLOYEE
from utils.fields import get_field_description
from utils.supabase import save_to_supabase
from utils.template_notification_pdf import create_notification_from_db_data

logger = logging.getLogger(__name__)

async def save_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Supabase –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç.
    """
    user_data = context.user_data
    service_type = user_data.get('service', '')
    
    # --- –°–±–æ—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å ---
    full_data = {
        "company_name": user_data.get("company_name", ""),
        "company_inn": user_data.get("company_inn", ""),
        "service": service_type,
        "stage": user_data.get("stage", ""),
        "city": user_data.get("city", ""),
    }
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–ª–æ–≤–∞—Ä–µ–π –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
    for doc_type in ['passport', 'migration', 'patent', 'dms', 'contract']:
        full_data.update(user_data.get(f'{doc_type}_fields', {}))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    manual_data = user_data.get('manual_fields', {})
    for (doc_type, field), value in manual_data.items():
        full_data[field] = value

    # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é ---
    # –ü—Ä–∏–≤–æ–¥–∏–º –§–ò–û –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    if 'fio' in full_data:
        full_data['fio'] = str(full_data.get('fio', '')).upper()
    if 'fio_latin' in full_data:
        full_data['fio_latin'] = str(full_data.get('fio_latin', '')).upper()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–∞–Ω–∫–∞ –ø–∞—Ç–µ–Ω—Ç–∞
    blank = full_data.get('patent_blank', '')
    if blank:
        letters = ''.join([c for c in blank if c.isalpha()])
        digits = ''.join([c for c in blank if c.isdigit()])
        full_data['patent_blank_series'] = letters.upper()
        full_data['patent_blank_number'] = digits

    # –°–ø–∏—Å–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü Supabase
    passport_fields_allowed = [
        "company_name", "company_inn", "service", "stage", "fio", "fio_latin", "birthdate", "birth_place", "sex",
        "passport_series", "passport_number", "doc_number", "issue_date", "passport_until", "issuer", "issuer_country",
        "migration_card_series", "migration_card_number", "migration_card_date", "migration_card_purpose",
        "patent_series", "patent_number", "patent_date", "patent_until", "patent_issuer", 
        "patent_blank_series", "patent_blank_number", "status"
    ]
    notification_fields_allowed = [
        "company_name", "company_inn", "service", "fio", "fio_latin", "birthdate", "birth_place", "sex",
        "passport_series", "passport_number", "doc_number", "issue_date", "passport_until", "issuer", "issuer_country",
        "patent_series", "patent_number", "patent_date", "patent_until", "patent_issuer", 
        "patent_blank_series", "patent_blank_number", "inn", "dms_number", "contract_date", 
        "position", "insurance_date", "insurance_expiry", "insurance_company", "dms_series",
        "contact_phone", "contact_email"
    ]

    if service_type == "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞":
        table_name = "notifications"
        allowed_cols = notification_fields_allowed
    else:
        table_name = "passport_applications"
        allowed_cols = passport_fields_allowed

    data_to_save = {k: v for k, v in full_data.items() if k in allowed_cols}

    # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase ---
    saved = save_to_supabase(data_to_save, table_name)
    if not saved:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É!")

    # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ ---
    if service_type == "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞":
        await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π PDF-–¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç–æ—á–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º...")
        try:
            # –°–æ–∑–¥–∞–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF —Å –∫–ª–µ—Ç–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            pdf_path = create_notification_from_db_data(user_data)
            if pdf_path:
                with open(pdf_path, 'rb') as pdf_file:
                    await update.message.reply_document(
                        document=InputFile(pdf_file, filename="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ_–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π.pdf"),
                        caption="‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF!\n"
                               "üìã –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–µ—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º."
                    )
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                import os
                os.remove(pdf_path)
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF-—Ñ–∞–π–ª.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF-—Ñ–∞–π–ª: {e}")

    # --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ---
    await update.message.reply_text(
        "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
        reply_markup=ReplyKeyboardMarkup(ADD_EMPLOYEE_OPTION, resize_keyboard=True)
    )
    return ADD_ANOTHER_EMPLOYEE


async def manual_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–æ—á–µ—Ä–µ–¥–Ω—ã–π —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    user_data = context.user_data
    current_field_type, current_field_name = user_data['missing_fields'][0]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    user_data.setdefault('manual_fields', {})[(current_field_type, current_field_name)] = update.message.text.strip()
    
    # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –∏–∑ —Å–ø–∏—Å–∫–∞
    user_data['missing_fields'].pop(0)
    
    # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –µ—â–µ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞
    if user_data['missing_fields']:
        next_field_type, next_field_name = user_data['missing_fields'][0]
        field_desc = get_field_description(next_field_type, next_field_name)
        await update.message.reply_text(f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ: {field_desc}")
        return MANUAL_INPUT
    else:
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –≤–≤–µ–¥–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é
        await update.message.reply_text("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è—é...")
        return await save_application(update, context)
