import logging
from telegram import Update, ReplyKeyboardMarkup, InputFile
from telegram.ext import ContextTypes, ConversationHandler

from keyboards import ADD_EMPLOYEE_OPTION
from states import MANUAL_INPUT, ADD_ANOTHER_EMPLOYEE
from utils.fields import get_field_description
from utils.supabase import save_to_supabase
from utils.template_notification_pdf import create_notification_from_db_data

logger = logging.getLogger(__name__)

async def save_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Supabase –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç.
    """
    user_data = context.user_data
    service_type = user_data.get('service', '')
    
    # --- –°–±–æ—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å ---
    full_data = {
        "company_name": user_data.get("company_name", ""),
        "company_inn": user_data.get("company_inn", ""),
        "service": service_type,
        "stage": user_data.get("stage", ""),
        "city": user_data.get("city", ""),
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ –±–æ—Ç–∞
        "company_address": user_data.get("company_address", ""),
        "ogrn": user_data.get("ogrn", ""),
        "kpp": user_data.get("kpp", ""),
        "inn": user_data.get("company_inn", ""),  # –ò–ù–ù –¥–ª—è –ø—É–Ω–∫—Ç–∞ 11
    }
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–ª–æ–≤–∞—Ä–µ–π –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
    for doc_type in ['passport', 'migration', 'patent', 'dms', 'contract']:
        doc_fields = user_data.get(f'{doc_type}_fields', {})
        for field, value in doc_fields.items():
            if value and str(value).strip():  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                full_data[field] = value
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã—Ö –ø–æ–ª–µ–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ —Ç–∞–±–ª–∏—Ü—ã
    passport_fields = user_data.get('passport_fields', {})
    if passport_fields:
        field_mapping = {
            'authority': 'passport_issued_by',  # –ö–µ–º –≤—ã–¥–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç
            'birthdate': 'birthdate',          # –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
            'issue_date': 'issue_date',        # –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞
            'birth_place': 'birth_place',      # –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è
            'passport_series': 'passport_series', # –°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞
            'passport_number': 'passport_number', # –ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞
            'nationality': 'citizenship',       # –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ
            'expiry_date': 'passport_until'     # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞
        }
        for original_field, table_field in field_mapping.items():
            if original_field in passport_fields and passport_fields[original_field]:
                full_data[table_field] = passport_fields[original_field]
    
    # –§–ò–û —Ç–æ–ª—å–∫–æ –∏–∑ patent_fields
    patent_fields = user_data.get('patent_fields', {})
    if 'fio' in patent_fields and patent_fields['fio']:
        fio_raw = patent_fields['fio'].upper()
        full_data['fio'] = fio_raw
        fio_parts = fio_raw.split()
        if fio_parts:
            full_data['lastname'] = fio_parts[0] if len(fio_parts) > 0 else ''
            full_data['firstname'] = fio_parts[1] if len(fio_parts) > 1 else ''
            full_data['middlename'] = ' '.join(fio_parts[2:]) if len(fio_parts) > 2 else ''
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ DMS
    dms_fields = user_data.get('dms_fields', {})
    if dms_fields:
        # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π DMS –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        dms_mapping = {
            'insurance_company': 'insurance_company', 
            'insurance_date': 'insurance_date',
            'insurance_expiry': 'insurance_expiry',
            'dms_number': 'dms_number'  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 7: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ –î–ú–°
        }
        for dms_field, table_field in dms_mapping.items():
            if dms_field in dms_fields and dms_fields[dms_field]:
                full_data[table_field] = dms_fields[dms_field]
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    contract_fields = user_data.get('contract_fields', {})
    if contract_fields:
        contract_mapping = {
            'work_address': 'work_address',
            'position': 'position',
            'contract_date': 'contract_date',
            'phone': 'contact_phone',
            'contact_phone': 'contact_phone'
        }
        for contract_field, table_field in contract_mapping.items():
            if contract_field in contract_fields and contract_fields[contract_field]:
                full_data[table_field] = contract_fields[contract_field]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    manual_data = user_data.get('manual_fields', {})
    for (doc_type, field), value in manual_data.items():
        if value and value.strip():  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            full_data[field] = value

    # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é ---
    # –ü—Ä–∏–≤–æ–¥–∏–º –§–ò–û –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    if 'fio' in full_data:
        full_data['fio'] = str(full_data.get('fio', '')).upper()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–∞–Ω–∫–∞ –ø–∞—Ç–µ–Ω—Ç–∞
    blank = full_data.get('patent_blank', '')
    if blank:
        letters = ''.join([c for c in blank if c.isalpha()])
        digits = ''.join([c for c in blank if c.isdigit()])
        full_data['patent_blank_series'] = letters.upper()
        full_data['patent_blank_number'] = digits

    # –°–ø–∏—Å–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü Supabase
    passport_fields_allowed = [
        "company_name", "company_inn", "service", "stage", "fio", "birthdate", "birth_place", "sex",
        "passport_series", "passport_number", "doc_number", "issue_date", "passport_until", "issuer", "issuer_country",
        "migration_card_series", "migration_card_number", "migration_card_date", "migration_card_purpose",
        "patent_series", "patent_number", "patent_date", "patent_until", "patent_issuer", 
        "patent_blank_series", "patent_blank_number", "status"
    ]
    notification_fields_allowed = [
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        "company_name", "company_inn", "service", "city", 
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø—É–Ω–∫—Ç–∞ 11
        "company_address", "ogrn", "kpp", "inn",
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        "lastname", "firstname", "middlename", "fio", "citizenship", "birthdate", "birth_place",
        
        # –ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        "passport_series", "passport_number", "issue_date", "passport_issued_by",
        
        # –î–∞–Ω–Ω—ã–µ –ø–∞—Ç–µ–Ω—Ç–∞
        "patent_series", "patent_number", "patent_date",
        
        # –¢—Ä—É–¥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        "position", "work_address", "contract_date", "inn",
        
        # –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 7: –î–æ–±–∞–≤–ª—è–µ–º dms_number
        "insurance_company", "insurance_date", "insurance_expiry", "dms_number",
        
        # –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        "contact_phone", "contact_email"
    ]

    if service_type == "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞":
        table_name = "notifications"
        allowed_cols = notification_fields_allowed
    else:
        table_name = "passport_applications"
        allowed_cols = passport_fields_allowed

    data_to_save = {k: v for k, v in full_data.items() if k in allowed_cols}

    # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase ---
    saved = save_to_supabase(data_to_save, table_name)
    if not saved:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É!")

    # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ ---
    if service_type == "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞":
        await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π PDF-–¥–æ–∫—É–º–µ–Ω—Ç –ø–æ —Ñ–æ—Ä–º–µ –ú–í–î –†–æ—Å—Å–∏–∏ –æ—Ç 05.09.2023 –≥. ‚Ññ 655...")
        try:
            # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É –ú–í–î
            template_pdf_path = create_notification_from_db_data(full_data)
            if template_pdf_path:
                with open(template_pdf_path, 'rb') as pdf_file:
                    await update.message.reply_document(
                        document=InputFile(pdf_file, filename="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ_–ú–í–î.pdf"),
                        caption="‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ!\n"
                               "üìã –§–æ—Ä–º–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—é ‚Ññ1 –∫ –ø—Ä–∏–∫–∞–∑—É –ú–í–î –†–æ—Å—Å–∏–∏ –æ—Ç 05.09.2023 –≥. ‚Ññ 655"
                    )
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                import os
                os.remove(template_pdf_path)
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF-—Ñ–∞–π–ª –ø–æ —Ñ–æ—Ä–º–µ –ú–í–î.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF-—Ñ–∞–π–ª: {e}")

    # --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ---
    await update.message.reply_text(
        "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
        reply_markup=ReplyKeyboardMarkup(ADD_EMPLOYEE_OPTION, resize_keyboard=True)
    )
    return ADD_ANOTHER_EMPLOYEE


async def manual_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–æ—á–µ—Ä–µ–¥–Ω—ã–π —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    user_data = context.user_data
    current_field_type, current_field_name = user_data['missing_fields'][0]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    user_data.setdefault('manual_fields', {})[(current_field_type, current_field_name)] = update.message.text.strip()
    
    # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –∏–∑ —Å–ø–∏—Å–∫–∞
    user_data['missing_fields'].pop(0)
    
    # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –µ—â–µ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞
    if user_data['missing_fields']:
        next_field_type, next_field_name = user_data['missing_fields'][0]
        field_desc = get_field_description(next_field_type, next_field_name)
        await update.message.reply_text(f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ: {field_desc}")
        return MANUAL_INPUT
    else:
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –≤–≤–µ–¥–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é
        await update.message.reply_text("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è—é...")
        return await save_application(update, context)
